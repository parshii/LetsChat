@{
    ViewBag.Title = "Lets Chat";
}
<style>
    .whatsNew {
        float: right;
        margin-right: 50px;
        color: forestgreen;
        font-weight: bold;
        top: 0;
    }

        .whatsNew a {
            margin-left: 25px;
        }

    #chatContainer {
        display: none;
    }
    /* ###### White / Pink #########*/
    .white-pink {
        margin-left: auto;
        margin-right: auto;
        max-width: 500px;
        background: #FFF;
        padding: 30px 30px 20px 30px;
        box-shadow: rgba(187, 187, 187, 1) 0 0px 20px -1px;
        -webkit-box-shadow: rgba(187, 187, 187, 1) 0 0px 20px -1px;
        font: 12px Arial, Helvetica, sans-serif;
        color: #666;
        border-radius: 10px;
        -webkit-border-radius: 10px;
    }

        .white-pink h1 {
            font: 24px "Trebuchet MS", Arial, Helvetica, sans-serif;
            padding: 0px 0px 10px 40px;
            display: block;
            border-bottom: 1px solid #F5F5F5;
            margin: -10px -30px 10px -30px;
            color: #969696;
        }

            .white-pink h1 > span {
                display: block;
                font-size: 11px;
                color: #C4C2C2;
            }

        .white-pink label {
            display: block;
            margin: 0px 0px 5px;
        }

            .white-pink label > span {
                float: left;
                width: 20%;
                text-align: right;
                padding-right: 10px;
                margin-top: 10px;
                color: #969696;
            }

        .white-pink input[type="text"] {
            color: #555;
            width: 70%;
            padding: 3px 0px 3px 5px;
            margin-top: 2px;
            margin-right: 6px;
            margin-bottom: 16px;
            border: 1px solid #e5e5e5;
            background: #fbfbfb;
            height: 25px;
            line-height: 15px;
            outline: 0;
            -webkit-box-shadow: inset 1px 1px 2px rgba(200,200,200,0.2);
            box-shadow: inset 1px 1px 2px rgba(200,200,200,0.2);
        }


        .white-pink .button {
            -moz-box-shadow: inset 0px 1px 0px 0px #fbafe3;
            -webkit-box-shadow: inset 0px 1px 0px 0px #fbafe3;
            box-shadow: inset 0px 1px 0px 0px #fbafe3;
            background: -webkit-gradient( linear, left top, left bottom, color-stop(0.05, #ff5bb0), color-stop(1, #ef027d) );
            background: -moz-linear-gradient( center top, #ff5bb0 5%, #ef027d 100% );
            filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff5bb0', endColorstr='#ef027d');
            background-color: #ff5bb0;
            border-radius: 9px;
            -webkit-border-radius: 9px;
            -moz-border-border-radius: 9px;
            border: 1px solid #ee1eb5;
            display: inline-block;
            color: #ffffff;
            font-family: Arial;
            font-size: 15px;
            font-weight: bold;
            font-style: normal;
            height: 40px;
            line-height: 30px;
            width: 100px;
            text-decoration: none;
            text-align: center;
            text-shadow: 1px 1px 0px #c70067;
        }

            .white-pink .button:hover {
                background: -webkit-gradient( linear, left top, left bottom, color-stop(0.05, #ef027d), color-stop(1, #ff5bb0) );
                background: -moz-linear-gradient( center top, #ef027d 5%, #ff5bb0 100% );
                filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ef027d', endColorstr='#ff5bb0');
                background-color: #ef027d;
            }

            .white-pink .button:active {
                position: relative;
                top: 1px;
            }
</style>


<h2 style="">Lets Chat</h2>
<div style="color: darkgreen">
    Online
    <ul id="online"></ul>
</div>
<div class="whatsNew">
    <ul>
        Whats New ?
        <li>Inclusion of Chat history</li>
        <li>Removal of extra menu tabs</li>
        <li>Inclusion of sign out</li>
        <li>New login page</li>
    </ul>
    <a href="#" id="cleanHistory">Sign out and clean chat history</a>
</div>
<div id="chatContainer" class="white-pink">
    <ul id="discussion"></ul>
    <input type="text" id="message" />
    <input type="button" id="sendmessage" value="Send" />
    <label id="displayname"></label>
</div>

<div id="loginForm" class="white-pink">
    <h1>
        Login
        <span>Warning!! You cannot reset, untill you signout</span>
    </h1>
    <label>
        <span>Your Name :</span>
        <input required id="name" type="text" name="name" placeholder="Please enter your name name" />
    </label>
    <label>
        <span>&nbsp;</span>
        <input type="button" id="login" class="button" value="Enter" />
    </label>
</div>




@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.1.2.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>
        $(function () {
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.chatHub;
            var chats = {
                name: [],
                message: [],
                displayName: ''
            };

            function checkLogin(displayName) {
                if (displayName && displayName.trim() !== '') {
                    $("#loginForm").css("display", "none");
                    $("#chatContainer").css("display", "block");
                    $('#displayname').text('Hi ' + displayName + ', Lets Chat!!');
                    $('#displayname').val(displayName);
                    chats.displayName = $('#displayname').val();
                }
            };

            function checkHistory() {
                if (typeof (Storage) !== "undefined") {
                    var bugger = JSON.parse(localStorage.getItem("chats"));
                    $('#discussion').empty();
                    $('#online').empty();
                    if (bugger && bugger.name.length > 0) {
                        chats = bugger;
                        for (var i = 0; i < chats.name.length; i++) {
                            $('#discussion').append('<li><strong>' + htmlEncode(chats.name[i])
                                + '</strong>: ' + htmlEncode(chats.message[i]) + '</li>');
                        }
                        $("#chatContainer").css("display", "block");
                        checkLogin(chats.displayName);
                    }
                }


            };

            checkHistory();

            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function (name, message) {
                // Add the message to the page.
                if (message === 'online') {
                    $('#online').append('<li><strong>' + htmlEncode(name)
                          + '</strong></li>');
                } else if (message === 'offline') {
                    $($('#online').find(":contains(" + name + ")")[0]).remove();
                } else {
                    chats.name.push(name);
                    chats.message.push(message);
                    $('#discussion').append('<li><strong>' + htmlEncode(name)
                          + '</strong>: ' + htmlEncode(message) + '</li>');
                }

                if (typeof (Storage) !== "undefined") {
                    localStorage.setItem("chats", JSON.stringify(chats));
                } else {
                    $('#discussion').append('<li><strong>' + htmlEncode(name)
                     + '</strong>: ' +
                     htmlEncode("Sorry, your browser does not support Web Storage...") + '</li>');
                }


            };

            // Set initial focus to message input box.
            $('#message').focus();
            // Start the connection.
            $.connection.hub.start().done(function () {

                $('#sendmessage').click(function () {
                    // Call the Send method on the hub.
                    chat.server.send($('#displayname').val(), $('#message').val());
                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();
                });

                $('#cleanHistory').click(function () {
                    chats.name = [];
                    chats.message = [];
                    chats.displayName = '';
                    localStorage.setItem("chats", JSON.stringify(chats));
                    checkHistory();
                    // Clear text box and reset focus for next comment.
                    chat.server.send($('#name').val(), 'offline');
                    $('#message').val('').focus();
                    $("#loginForm").css("display", "block");
                    $("#chatContainer").css("display", "none");
                    $('#name').val('').focus();
                });

                $('#login').click(function () {
                    chat.server.send($('#name').val(), 'online');
                    checkLogin($('#name').val());
                });


            });

            $(window).bind('keypress', function (e) {
                if (e.keyCode === 13) {
                    if (e.target.id === 'name') {
                        $('#login').click();
                    }
                    else {
                        $('#sendmessage').click();
                    }
                }
            });



        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
    </script>
}

